{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,0BAQA,MAAMC,EAAO,CACTC,KAAMC,SAASC,cAAc,gBAC7BC,iBAAkBF,SAASC,cAAc,YAC3CE,SAAUH,SAASI,iBAAiB,cACpCC,MAAOL,SAASC,cAAc,cAG1BK,EAAkB,IAAI,EAAAV,EAAAW,iBAG5B,IAAIC,EAAU,IAAIC,EAAAC,GAAJ,CAAmB,cA+CjC,SAASC,EAAWC,GAChB,MAAQC,aAAAC,EAAcC,cAAAC,EAAeC,KAAAC,EAAMC,MAAAC,EAAOC,MAAAC,EAAOC,SAAAC,EAAUC,UAAAC,GAAcd,EACjF,IAAIe,EAAS,GA0Bb,OAxBAA,EAASf,EAAKgB,KAAI,EAACf,aAAEA,EAAYE,cAAEA,EAAaE,KAAEA,EAAIE,MAAEA,EAAKE,MAAEA,EAAKE,SAAEA,EAAQE,UAAEA,KACrE,YAAYV,+DACbF,WAAsBI,2GAItBE,kFAIAE,uFAICE,wFAIDE,6CAGAI,KAAK,IAEf/B,EAAKI,iBAAiB4B,mBAAmB,YAAaH,GACvCnB,EAAQuB,S,CAG3B,SAASC,EAAQC,GACgB,IAAzB3B,EAAgB4B,KACpBzB,EAAA0B,GAASC,OAAOC,QAAQ,oBAAoBJ,EAAKK,qBACtCL,EAAKrB,KAAK2B,OAASjC,EAAgBkC,UAC5CC,EAASC,QAAQ5C,EAAKO,OACxBI,EAAA0B,GAASC,OAAOO,QAAQ,+DAExBC,QAAQC,IAAIZ,EAAKrB,K,CAQrB,SAASkC,EAAQC,GACbH,QAAQC,IAAIE,GACdtC,EAAA0B,GAASC,OAAOY,QACd,2E,CA7FJlD,EAAKC,KAAKkD,MAAMC,QAAU,OAC1BpD,EAAKC,KAAKkD,MAAME,eAAiB,SACjCrD,EAAKC,KAAKkD,MAAMG,QAAU,OAC1BtD,EAAKC,KAAKkD,MAAMI,gBAAkB,OAGlCvD,EAAKI,iBAAiB+C,MAAMC,QAAU,OACtCpD,EAAKI,iBAAiB+C,MAAMK,SAAW,OACvCxD,EAAKI,iBAAiB+C,MAAMM,IAAM,OAClCzD,EAAKI,iBAAiB+C,MAAMC,QAAU,OACtCpD,EAAKI,iBAAiB+C,MAAME,eAAiB,gBAC7CrD,EAAKI,iBAAiB+C,MAAMG,QAAU,OAKtCtD,EAAKC,KAAKyD,iBAAiB,UAG3B,SAAsBC,GAKlB,GAHAA,EAAMC,iBACNpD,EAAgBqD,MAAQF,EAAMG,cAAcC,SAASC,YAAYC,MAAMC,QAElE1D,EAAgBqD,MAEjB,YADAlD,EAAA0B,GAASC,OAAOO,QAAQ,0CAK5B,OADArC,EAAgB2D,YACT3D,EACF4D,cACFC,MAAKlC,IACFQ,EAASC,QAAQ5C,EAAKO,OACpB2B,EAAQC,GACDA,EAAKrB,QAEfuD,KAAKxD,GAAYyD,MAAMtB,GAASuB,SAAQ,KACzCvE,EAAKC,KAAKuE,OAAO,G,IA4DzB,MAIQ7B,EAAW,IAAI8B,sBAIvB,SAAgBC,GACZ5B,QAAQC,IAAI2B,GACZA,EAAQC,SAAQC,IACZ9B,QAAQC,IAAI,uBAAwB6B,EAAMC,gBACtCD,EAAMC,iBACNC,GAAQ,EACRtE,EACK4D,cACAC,MAAKlC,IACFQ,EAASC,QAAQ5C,EAAKO,OACtB2B,EAAQC,GACDA,EAAKrB,QAEfuD,KAAKxD,GAAYyD,MAAMtB,GAASuB,SAAQ,IAAMvE,EAAKC,KAAKuE,U,MArBzD,CACZO,KAAM,KACNC,WAAY,UAIhB,IAAIF,EAAO","sources":["src/infinityscroll.js"],"sourcesContent":["import { ImageApiService } from \"./api-sourse\";\n\nimport Notiflix from 'notiflix';\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\n\n\nconst refs = {\n    form: document.querySelector(\".search-form\"),\n    galleryContainer: document.querySelector(\".gallery\"),\n  infoItem: document.querySelectorAll(\".info-item\"),\n  guard: document.querySelector('.js-guard'),\n}\n\nconst imageApiService = new ImageApiService();\n\n\nlet gallery = new SimpleLightbox('.gallery a');\n\n\nrefs.form.style.display = \"flex\";\nrefs.form.style.justifyContent = \"center\";\nrefs.form.style.padding = \"20px\";\nrefs.form.style.backgroundColor = \"blue\";\n\n\nrefs.galleryContainer.style.display = \"flex\";\nrefs.galleryContainer.style.flexWrap = \"wrap\";\nrefs.galleryContainer.style.gap = \"30px\";\nrefs.galleryContainer.style.display = \"flex\";\nrefs.galleryContainer.style.justifyContent = \"space-between\";\nrefs.galleryContainer.style.padding = \"20px\";\n\n\n\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(event) {\n    \n    event.preventDefault();\n    imageApiService.query = event.currentTarget.elements.searchQuery.value.trim();\n\n    if (!imageApiService.query) {\n        Notiflix.Notify.warning(\"Please, enter something and try again!\");\n        return\n    }\n    \n    imageApiService.resetPage();\n    return imageApiService\n        .fetchImages()\n      .then(data => {\n          observer.observe(refs.guard);\n            message(data);\n            return data.hits\n        })\n        .then(makeMarkup).catch(onError).finally(() => {\n        refs.form.reset();\n    });\n    clearGalleryContainer();\n    \n}\n\nfunction makeMarkup(hits) {\n    const { webformatURL, largeImageURL, tags, likes, views, comments, downloads } = hits;\n    let markup = \"\";\n\n    markup = hits.map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => {\n        return `<a href=\"${largeImageURL}\" class=\"image-link\"><div class=\"photo-card\">\n  <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n  <div class=\"info\">\n    <p class=\"info-item\">\n      <b>Likes:</b>\n      <span>${likes}<span>\n    </p>\n    <p class=\"info-item\">\n      <b>Views:</b>\n      <span>${views}</span>\n    </p>\n    <p class=\"info-item\">\n      <b>Comments:</b>\n      <span> ${comments}</span>\n    </p>\n    <p class=\"info-item\">\n      <b>Downloads: </b>\n      <span>${downloads}</span>\n    </p>\n  </div>\n</div></a>`}).join('');\n\n    refs.galleryContainer.insertAdjacentHTML(\"beforeend\", markup);\n    return markup, gallery.refresh();\n}\n\nfunction message(data) {\n    if (imageApiService.page === 2) {\n    Notiflix.Notify.success(`Hooray! We found ${data.totalHits} images.`); \n    } else if (data.hits.length < imageApiService.perPage) {\n      observer.observe(refs.guard);\n    Notiflix.Notify.warning(\"We're sorry, but you've reached the end of search results.\");\n    } \n    console.log(data.hits);\n  }\n\n\nfunction clearGalleryContainer() {\n    refs.galleryContainer.innerHTML = \"\";\n}\n\nfunction onError(error) {\n    console.log(error);\n  Notiflix.Notify.failure(\n    'Sorry, there are no images matching your search query. Please try again.'\n  );\n  \n}\n\nconst details = {\n    root: null,\n    rootMargin: '300px',\n  };\n  const observer = new IntersectionObserver(onload, details);\n\nlet page = 1;\n\nfunction onload(entries) {\n    console.log(entries);\n    entries.forEach(entry => {\n        console.log('entry.isIntersecting', entry.isIntersecting);\n        if (entry.isIntersecting) {\n            page += 1;\n            imageApiService\n                .fetchImages()\n                .then(data => {\n                    observer.observe(refs.guard);\n                    message(data);\n                    return data.hits\n                })\n                .then(makeMarkup).catch(onError).finally(() => refs.form.reset())\n        }})\n       \n    }\n  \n   \n\n"],"names":["$2RDrW","parcelRequire","$4677b00d05925fd6$var$refs","form","document","querySelector","galleryContainer","infoItem","querySelectorAll","guard","$4677b00d05925fd6$var$imageApiService","ImageApiService","$4677b00d05925fd6$var$gallery","$parcel$interopDefault","$fZKcF","$4677b00d05925fd6$var$makeMarkup","hits","webformatURL","webformatURL1","largeImageURL","largeImageURL1","tags","tags1","likes","likes1","views","views1","comments","comments1","downloads","downloads1","markup","map","join","insertAdjacentHTML","refresh","$4677b00d05925fd6$var$message","data","page","$7Y9D8","Notify","success","totalHits","length","perPage","$4677b00d05925fd6$var$observer","observe","warning","console","log","$4677b00d05925fd6$var$onError","error","failure","style","display","justifyContent","padding","backgroundColor","flexWrap","gap","addEventListener","event","preventDefault","query","currentTarget","elements","searchQuery","value","trim","resetPage","fetchImages","then","catch","finally","reset","IntersectionObserver","entries","forEach","entry","isIntersecting","$4677b00d05925fd6$var$page","root","rootMargin"],"version":3,"file":"infinity-scroll.4e47cac6.js.map"}